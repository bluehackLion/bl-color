# coding: utf-8
"""
    stylelens-feature

    This is a API document for Object Detection on fashion items\"

    OpenAPI spec version: 0.0.1
    Contact: devops@bluehack.net
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import numpy as np
import tensorflow as tf


class ExtractColor(object):
  def __init__(self):
    try:
      #MODEL = os.environ['CLASSIFY_GRAPH']
      MODEL = '/Users/lion/PycharmProjects/bl-color/color_classification_model.pb'
      #MODEL = '/Users/lion/PycharmProjects/bl-color/classify_image_graph_def.pb'
      LABEL = '/Users/lion/PycharmProjects/bl-color/labels.txt'
    except:
      print("!!! Need to define environment variable: CLASSIFY_GRAPH=/path/to/model.pb")

    with tf.gfile.FastGFile(MODEL, 'rb') as f:
      graph_def = tf.GraphDef()
      graph_def.ParseFromString(f.read())
      _ = tf.import_graph_def(graph_def, name='')

    #with tf.device('/device:GPU:0'):
    with tf.Session() as self.sess:
      """
      self.graph = self.sess.graph.get_operations()
      for i in self.graph:
        print(i)
      """
      self.softmax_tensor = self.sess.graph.get_tensor_by_name('InceptionV3/Predictions/Softmax:0')
  def extract_color(self, image_data):
    label_dic = {}
    predict_color = self.sess.run(self.softmax_tensor, {'input:0': image_data})
    predict_color = np.squeeze(predict_color)
    color = predict_color.argsort()

    #label 받아오기
    label_f = open(self.LABEL,'rb')
    lines = label_f.readlines()
    for w in lines:
      w = str(w).replace('b\'', "")
      w = w.replace("\\n", "")
      labels_data = w.split(':')
      label_dic[labels_data[0]] = labels_data[1]

    answer_label = label_dic[color[-1]]
    answer_score = predict_color[color[-1]]

    print(answer_label, answer_score)

    return answer_label, answer_score

